# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../../../../../Users/lukastk/dev/2025-10-19_00__add-to-pet/pts/main.pct.py.

# %% top_export
import typer
from typer import Argument, Option
from typing_extensions import Annotated
from pathlib import Path
import toml
import json

from add_to_pet import const
from add_to_pet.app import app

@app.command()
def add_to_pet(
    cmd: Annotated[str, Argument(help="The command to add to pet.")],
    description: Annotated[str, Option("-d", "--description", help="The description of the command.")] = "",
    output: Annotated[str, Option("-o", "--output", help="The output of the command.")] = "",
    tag: Annotated[list[str], Option("-t", "--tag", help="The tags of the command.")] = [],
    snippets_path: Annotated[str|None, Option("-p", "--snippets-path", help="Path to the snippets file.")] = None,
): 
    # AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../../../../../Users/lukastk/dev/2025-10-19_00__add-to-pet/pts/main.pct.py.
    
    # %% auto 0
    __all__ = ['snippet', 'snippets_path', 'snippets_data', 'duplicate_snippets']
    
    # %% ../../../../../../../../Users/lukastk/dev/2025-10-19_00__add-to-pet/pts/main.pct.py 6
    snippet = {
        "command": cmd,
        "Description": description,
        "Output": output,
        "Tag": tag,
    }
    
    # %% ../../../../../../../../Users/lukastk/dev/2025-10-19_00__add-to-pet/pts/main.pct.py 7
    snippets_path = const.snippets_path if snippets_path is None else Path(snippets_path)
    snippets_data = toml.loads(open(snippets_path).read())
    duplicate_snippets = [i for i, s in enumerate(snippets_data["Snippets"]) if s["command"] == cmd]
    
    if len(duplicate_snippets) == 1:
        snippet_index = duplicate_snippets[0]
        snippets_data["Snippets"][snippet_index] = snippet
    elif len(duplicate_snippets) > 1:
        raise ValueError(f"Found {len(duplicate_snippets)} duplicate snippets for command {cmd}. Maximum number of duplicates allowed is 1.")
    else:
        snippets_data["Snippets"].append(snippet)
    
    with open(snippets_path, "w") as f:
        f.write(toml.dumps(snippets_data))
    return